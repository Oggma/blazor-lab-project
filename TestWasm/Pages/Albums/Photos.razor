@page "/photos"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient Http


@if (photos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="ogm-photo-list">
        @foreach (var ph in photos)
        {
            <PhotoView PhotoSource="@ph" ShowAsThumbnail="true" OnThumbnailClick="@OnThumbnailClickHandler"></PhotoView>
        }

        @if (showedPhoto is not null)
        {
            <div class="ogm-modal" id="photoModal">
                <div class="ogm-modal-content">
                    <PhotoView PhotoSource="@showedPhoto"></PhotoView>
                </div>
            </div>
        }

    </div>
}


@code {
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/albums/photo-modal.js").AsTask();

    private Photo[] photos;
    private Photo showedPhoto;

    protected override async Task OnInitializedAsync()
    {
        photos = await Http.GetFromJsonAsync<Photo[]>("https://jsonplaceholder.typicode.com/photos/?albumId=1");
    }

    protected virtual async Task OnThumbnailClickHandler(Photo photo)
    {
        showedPhoto = photo;
        await InvokeAsync(StateHasChanged);

        var module = await Module;
        await module.InvokeVoidAsync("open", "photoModal");
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}
